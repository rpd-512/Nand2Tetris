// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    
    //Registers
    ARegister(in=ina, load=loadA, out[0..14]=addressM, out=addrPC);
    DRegister(in=outALU, load=loadD, out=x);
    PC(in=addrPC, load=jump, inc=true, reset=reset, out[0..14]=pc);       

    //Mux
    Mux16(a=outALU, b=instruction, sel=instA, out=ina);
    Mux16(a=addrPC, b=inM, sel=AMtoALU, out=y);

    //ALU
    ALU(x=x, y=y,zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=outM, out=outALU, zr=zrout, ng=ngout);
    
    //controls decoder

    //instA logic
    Not(in=instruction[15], out=instA);

    //loadD logic
    Not(in=instA, out=instC);
    And(a=instC, b=instruction[4], out=loadD);

    //loadA logic
    And(a=instC, b=instruction[5], out=destA);
    Or(a=instA, b=destA, out=loadA);
    
    //writeM logic
    And(a=instC, b=instruction[3], out=writeM);
    
    //AMtoALU
    And(a=instC, b=instruction[12], out=AMtoALU);
    
    //jump conditions
        //initiation
        And(a=instC, b=instruction[0], out=instJumpGT);
        And(a=instC, b=instruction[1], out=instJumpEQ);
        And(a=instC, b=instruction[2], out=instJumpLT);

        //jump control
        //is equal to
        And(a=instJumpEQ, b=zrout, out=jmpEQ);

        //is less than
        And(a=instJumpLT, b=ngout, out=jmpLT);

        //is greater than
        //check for positive
        Not(in=zrout, out=notzrout);
        Not(in=ngout, out=notngout);
        And(a=notngout, b=notzrout, out=pvout);

        And(a=instJumpGT, b=pvout, out=jmpGT);

    Or8Way(in[0]=jmpLT,in[1]=jmpEQ,in[2]=jmpGT, in[3..7]=false, out=jump);
}
